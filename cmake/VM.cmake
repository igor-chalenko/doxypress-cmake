function(_vm_memory_index _out_var)
    TPA_get(properties _properties)
    set(${_out_var} "${_properties}" PARENT_SCOPE)
endfunction()

function(_vm_memory_inputs _out_var)
    TPA_get(${_DOXYPRESS_INPUTS} _inputs)
    set(${_out_var} "${_inputs}" PARENT_SCOPE)
endfunction()

function(_vm_memory_properties _out_var)
    TPA_get(${_DOXYPRESS_JSON_PATHS_KEY} _paths)
    set(${_out_var} "${_paths}" PARENT_SCOPE)
endfunction()

function(_vm_memory_write _property _value)
    TPA_set(${_property} "${_value}")
endfunction()

function(_vm_memory_append _property _value)
    TPA_append(${_property} "${_value}")
endfunction()

function(_vm_memory_read _property _out_var)
    TPA_get(${_property} _value)
    set(${_out_var} "${_value}" PARENT_SCOPE)
endfunction()

function(_vm_memory_clear)
    TPA_clear_scope()
endfunction()

function(_vm_file_read _file_name)
    _doxypress_log(INFO "Loading project template ${_file_name}...")
    file(READ "${_file_name}" _contents)
    sbeParseJson(doxypress _contents)
    foreach (_property ${doxypress})
        _vm_memory_write(${_property} "${${_property}}")
    endforeach ()
    _vm_memory_write(${_DOXYPRESS_PROJECT_KEY} "${doxypress}")
    # clean up JSON variables
    sbeClearJson(doxypress)
endfunction()

function(_vm_file_write _file_name)
    _vm_memory_read(${_DOXYPRESS_PROJECT_KEY} _variables)

    _JSON_serialize("${_variables}" _json)
    _doxypress_log(INFO "Saving processed project file ${_file_name}...")
    file(WRITE "${_file_name}" ${_json})
endfunction()

function(_vm_property_pointer _paths _out_var)
    TPA_get("_doxypress.property.pointer" _pointer)
    if (_pointer STREQUAL "")
        set(_pointer 0)
    endif()
    list(LENGTH _paths _length)
    if (_pointer LESS _length)
        list(GET _paths ${_pointer} _path)
        math(EXPR _pointer "${_pointer}+1")
        TPA_set("_doxypress.property.pointer" ${_pointer})
        set(${_out_var} ${_path} PARENT_SCOPE)
    else()
        set(${_out_var} "<<eof>>" PARENT_SCOPE)
    endif()
endfunction()

function(_vm_property_override)
endfunction()

function(_vm_start)
    _doxypress_params_init_properties()

    set("project.project-name" "${PROJECT_NAME}" PARENT_SCOPE)
    set("project.project-version" ${PROJECT_VERSION} PARENT_SCOPE)
    set("project.project-brief" ${PROJECT_DESCRIPTION} PARENT_SCOPE)

    set("output-latex.latex-hyper-pdf" true PARENT_SCOPE)
    set("output-latex.latex-pdf" true PARENT_SCOPE)
    set("output-latex.latex-batch-mode" true PARENT_SCOPE)
    set("output-html.html-output" "html" PARENT_SCOPE)
    set("output-html.html-file-extension" ".html" PARENT_SCOPE)
    set("output-xml.xml-output" "xml" PARENT_SCOPE)
    set("output-latex.latex-output" "latex" PARENT_SCOPE)
    set("input.input-recursive" true PARENT_SCOPE)
    set("input.example-recursive" true PARENT_SCOPE)
endfunction()

function(test1)
    _vm_start()
    _vm_file_read(${doxypress_dir}/DoxypressCMake.json)
    _vm_memory_properties(_properties)
    test2()
    _vm_memory_clear()
endfunction()

function(test2)
    _vm_property_pointer("${_properties}" _property)
    _vm_memory_read(${_property} _value)
    message(STATUS ${_property} = ${_value})
    _vm_repeat(test2)
endfunction()

function(_vm_repeat _fun)
    if (NOT _property STREQUAL "<<eof>>")
        _doxypress_call(${_fun} "")
    endif()
endfunction()